//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerHelicopter"",
            ""id"": ""16c768a8-23ef-4740-a0ac-b0ef02503f77"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMove"",
                    ""type"": ""Value"",
                    ""id"": ""d1da3cad-fb28-439e-ba38-86c43ae48b90"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Button"",
                    ""id"": ""470c4a2a-e9e5-4ce4-af19-77fa832012f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryWeaponFire"",
                    ""type"": ""Button"",
                    ""id"": ""09ddbe59-d018-45f1-af34-0de072f8ddcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryWeaponFire"",
                    ""type"": ""Button"",
                    ""id"": ""18cc6a2a-cc0a-4499-8d1c-dadd7490696a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""81ed22ee-71fc-46c0-9f4a-214e73e7e637"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5af9624c-ab7c-430d-a502-c12ec1ad02e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""edb7f684-e353-47b8-a6c5-af998fca25cc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b1ab8f55-83cc-4408-9435-6c3103e3f891"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2be8c504-0edf-4fc9-8df7-6ec68f405d2e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4fa0d472-a05b-463a-abdc-f3be762f76e8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a9ecc19b-1b45-4c80-ae01-576f3bbb3308"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""769c3c75-6c9b-45e8-be53-d7377f56e9ab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d55cd33-76bc-4b94-b601-1afce238d41c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryWeaponFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81bd62fe-caad-413b-85e1-a9f5cd16285c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryWeaponFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerHelicopter
        m_PlayerHelicopter = asset.FindActionMap("PlayerHelicopter", throwIfNotFound: true);
        m_PlayerHelicopter_HorizontalMove = m_PlayerHelicopter.FindAction("HorizontalMove", throwIfNotFound: true);
        m_PlayerHelicopter_VerticalMove = m_PlayerHelicopter.FindAction("VerticalMove", throwIfNotFound: true);
        m_PlayerHelicopter_PrimaryWeaponFire = m_PlayerHelicopter.FindAction("PrimaryWeaponFire", throwIfNotFound: true);
        m_PlayerHelicopter_SecondaryWeaponFire = m_PlayerHelicopter.FindAction("SecondaryWeaponFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerHelicopter
    private readonly InputActionMap m_PlayerHelicopter;
    private List<IPlayerHelicopterActions> m_PlayerHelicopterActionsCallbackInterfaces = new List<IPlayerHelicopterActions>();
    private readonly InputAction m_PlayerHelicopter_HorizontalMove;
    private readonly InputAction m_PlayerHelicopter_VerticalMove;
    private readonly InputAction m_PlayerHelicopter_PrimaryWeaponFire;
    private readonly InputAction m_PlayerHelicopter_SecondaryWeaponFire;
    public struct PlayerHelicopterActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerHelicopterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMove => m_Wrapper.m_PlayerHelicopter_HorizontalMove;
        public InputAction @VerticalMove => m_Wrapper.m_PlayerHelicopter_VerticalMove;
        public InputAction @PrimaryWeaponFire => m_Wrapper.m_PlayerHelicopter_PrimaryWeaponFire;
        public InputAction @SecondaryWeaponFire => m_Wrapper.m_PlayerHelicopter_SecondaryWeaponFire;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHelicopter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHelicopterActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerHelicopterActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerHelicopterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerHelicopterActionsCallbackInterfaces.Add(instance);
            @HorizontalMove.started += instance.OnHorizontalMove;
            @HorizontalMove.performed += instance.OnHorizontalMove;
            @HorizontalMove.canceled += instance.OnHorizontalMove;
            @VerticalMove.started += instance.OnVerticalMove;
            @VerticalMove.performed += instance.OnVerticalMove;
            @VerticalMove.canceled += instance.OnVerticalMove;
            @PrimaryWeaponFire.started += instance.OnPrimaryWeaponFire;
            @PrimaryWeaponFire.performed += instance.OnPrimaryWeaponFire;
            @PrimaryWeaponFire.canceled += instance.OnPrimaryWeaponFire;
            @SecondaryWeaponFire.started += instance.OnSecondaryWeaponFire;
            @SecondaryWeaponFire.performed += instance.OnSecondaryWeaponFire;
            @SecondaryWeaponFire.canceled += instance.OnSecondaryWeaponFire;
        }

        private void UnregisterCallbacks(IPlayerHelicopterActions instance)
        {
            @HorizontalMove.started -= instance.OnHorizontalMove;
            @HorizontalMove.performed -= instance.OnHorizontalMove;
            @HorizontalMove.canceled -= instance.OnHorizontalMove;
            @VerticalMove.started -= instance.OnVerticalMove;
            @VerticalMove.performed -= instance.OnVerticalMove;
            @VerticalMove.canceled -= instance.OnVerticalMove;
            @PrimaryWeaponFire.started -= instance.OnPrimaryWeaponFire;
            @PrimaryWeaponFire.performed -= instance.OnPrimaryWeaponFire;
            @PrimaryWeaponFire.canceled -= instance.OnPrimaryWeaponFire;
            @SecondaryWeaponFire.started -= instance.OnSecondaryWeaponFire;
            @SecondaryWeaponFire.performed -= instance.OnSecondaryWeaponFire;
            @SecondaryWeaponFire.canceled -= instance.OnSecondaryWeaponFire;
        }

        public void RemoveCallbacks(IPlayerHelicopterActions instance)
        {
            if (m_Wrapper.m_PlayerHelicopterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerHelicopterActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerHelicopterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerHelicopterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerHelicopterActions @PlayerHelicopter => new PlayerHelicopterActions(this);
    public interface IPlayerHelicopterActions
    {
        void OnHorizontalMove(InputAction.CallbackContext context);
        void OnVerticalMove(InputAction.CallbackContext context);
        void OnPrimaryWeaponFire(InputAction.CallbackContext context);
        void OnSecondaryWeaponFire(InputAction.CallbackContext context);
    }
}
